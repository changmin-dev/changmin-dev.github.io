FIXED NUMBER
복잡한 것을  다룰 수 있는가? 
프로그램?
메모리에 적재 되고 나서 부터 프로그램
랭기지 코드 - 린팅
머신 랭기징 - 컴파일

스크립트 언어 - 런타임에 컴파일하게됨
에러 찾기가 힘들어 진다.
스테틱 타임 - 레이어별로 나눔(베이스, 확장, 사용)

복잡성을 정복 - 격리(일을 맞김, 여러 요소로 나누면 ex))
코드 한줄을 짜더라도 어디까지 영향을 미추고  

리터럴 - 어떤 것을 표현할때 가장 작은 단위 ("37"은 리터럴이다. "15 + 12"는 아니다.)

더 깊이, 왜 그런지를 생각해야 API만 쓰다가 끝나지 않는다.

statements - 어떻게 실행되는 지는 가르쳐주는 흰트
식 - 값의 확장된 표현, 결과적으로 단위와 값에 속하게된다. 

참조형
let b = a 

알아야 할것을 확실히 알아야 한다.
컴공은 사실상 다 알아야함
하지만 재현 가능, 공리가 없어
코드를 어디까지 설명할 수 있는가?

할당은 LR이 아니다.
수학의 영향을 받아서임
수학의 영향을 받는게 많음
5 / 2 * 3 % 4 ? 암산 가능? 
사소한 수식이라도 괄호 치기, 혹은 함수로 바꿀수 있다면, 바꾸기

의도를 표현 - do while, while, if, switch 
제어문을 어떻게 쓰고 어떤 문을 어떻게 쓰는지로 의도를 표현 할수있다. 변수이름이 중요한게 아니다.
제어문은 힌트다.
괄호
1. 산술 연산의 우선 순위
2. 제어문에 들어가는 형식 기호
3. 함수 호출시 호출하는 연산

문자 하나당 가지는 의미 세미콜론도 여러가지 의미가 있다.

if 문 - 선택적인 실행(optional)
if A else B 문 - A,B 중하나가 확정적으로 수행(mandatory), 선택지

나무위에 산다 - 천적x, 뱀말고 뱀모양인거가 위협, 떨어지면 위험 - 신속하게
2지 선다가 뇌가 인식하기가 좋음
모든 코드는 사람에게 맞게
본인만의 세계를 구축하자 


레이블, 레이블 스코프(블록 x, 함수 o), 레이블이 가르킬수 있는거 레이블 레인지
이터레이션 셋, 레이블 셋(레이블이 가르키고 있는 영역, break가 되려면 뒤에 레이블이 있어야함, 없으면 에러)
이전의 언어는 위아래로 점프가 가능하지만, 요즘 언어는 아래로만 가능

예외 - 밑으로 점프하는 경우임!!!!!
abc: {
    log('a');
    break abc;//위로 갈거 같지만, 아래로감, 터보C이후에 나온 언어들은 이렇게 나옴  
    log('b');
}
log('c');

흐름 제어를 하지

변수의 중요한 요소(일반론)
라이프 사이클 : 특정 시점에 생겼다가 사라짐
접근 제어 : 스코프(접근 권한)을 둠

js
스코프 - 라이프 사이클이라고 부름


함수의 인자, 블록 스코프, 지역 변수, 맴버 변수
-> 자유 변수(자기를 기준으로 자기가 알 수 없는 것ex(함수의 ㅕㅇ우는 지역변수와 인자를 제외하면 자유 변수)), 
클로저(자유변수가 사용 될수 있는 공간)

let a = 3
const f = () =? {
    log(a)
}
a는 f에게 자유 변수가 된다.
쉐도잉 - 자유변수와 자신의 변수의 이름이 같으면 자신의 변수를 사용

k1:{
    let a = 3
    const f = () => {
        let a = 5;
        k:{
            break k1;//에러 스코프 안에 있는 내용만 
            log(22);
        }
    }
}

break, continue(goto 같으면)
이터레이션 셋 - 익명이 가능, 브레이크, 컨티뉴 둘다 가능 
레이블 셋 - 브레이크만 함 

스위치 레이블 블록 - 문이 아니다.
break;가 가능한 이유는 익명레이블을 만들기 때문이다.
js는 컴파일 타임이 없기 때문에 한줄씩 진행
때문에 js switch의 경우는 모든 case를 체크한다. 그리고 case에 
때문에 2가지가 가능하다.
1. 조건이 한정적이고 값이 다양한경우
2. 값이 한정적이고 조건이 다양한경우 
case 에 조건 넣기
-> java의 경우는 불가 - 상수만 가능

case에 식으로 할때는 복잡해 질수 있다.