<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-10-07T16:28:01+09:00</updated><id>http://localhost:4000/</id><title type="html">Twibeat</title><subtitle>잊어 버리지 않기 위해서</subtitle><entry><title type="html">2017년 10월 7일 TIL</title><link href="http://localhost:4000/TIL20171007/" rel="alternate" type="text/html" title="2017년 10월 7일 TIL" /><published>2017-10-07T00:00:00+09:00</published><updated>2017-10-07T00:00:00+09:00</updated><id>http://localhost:4000/TIL20171007</id><content type="html" xml:base="http://localhost:4000/TIL20171007/">&lt;h1 id=&quot;네트워크&quot;&gt;네트워크&lt;/h1&gt;
&lt;p&gt;약자의 원래 이름과 왜 이런지 생각하기&lt;/p&gt;

&lt;h2 id=&quot;패킷&quot;&gt;패킷&lt;/h2&gt;
&lt;p&gt;패킷 - 비트들의 묶음으로 중간에 라우터를 거쳐서 이동
패킷을 검사한다. - 목적지가 어디인가?&lt;/p&gt;

&lt;p&gt;다음 라우터로 갈때까지
12초후 - 첫번째 넘어감
프로파게이션은 - 빛의 속도
앞부분은 이미 도착
패킷의 앞부분이 도착하면 - 모든 부분이 올떄까지 기다림
송아지 ㅅ이 온다고 가는게 아니라 송아지가 와야 감&lt;/p&gt;

&lt;h2 id=&quot;인터넷-프로토콜-스택&quot;&gt;인터넷 프로토콜 스택&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;이   름&lt;/th&gt;
      &lt;th&gt;주요 프로토콜&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Application&lt;/td&gt;
      &lt;td&gt;HTTP&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Process의 위치&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Transport&lt;/td&gt;
      &lt;td&gt;TCP, UDP&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Network&lt;/td&gt;
      &lt;td&gt;IP&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Data Link&lt;/td&gt;
      &lt;td&gt;Ethernet, WIFI&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Physical&lt;/td&gt;
      &lt;td&gt;Twisted Pair&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;라우터의 계층은 네트워크 까지만 존재한다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;이   름&lt;/th&gt;
      &lt;th&gt;주요 프로토콜&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Network&lt;/td&gt;
      &lt;td&gt;IP&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Data Link&lt;/td&gt;
      &lt;td&gt;Ethernet, WIFI&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Physical&lt;/td&gt;
      &lt;td&gt;Twisted Pair&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;ip-주소&quot;&gt;IP 주소&lt;/h2&gt;
&lt;p&gt;IP 인터넷 상의 각 컴퓨는 각각의 주소를 가지고 있다. 이를 IP주소라고 한다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;서버 : 고정된 ip주소 필요하다. 사람들이 찾아간다.윛기가 바뀐다면 찾기 힘듬&lt;/li&gt;
  &lt;li&gt;클라이언트 : 고정되지 않아도 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ipc를-위한-인터페이스---소켓&quot;&gt;ipc를 위한 인터페이스 - 소켓&lt;/h2&gt;
&lt;p&gt;소켓을 인덱싱(주소 역할)하는 것은 IP 주소와 포트번호(프로세스를 구별 하기 위함)
브라우저에서 입력하는 방법 www.naver.com
실제로는 www.naver.com:80 포트는 생략하면 80으로&lt;/p&gt;

&lt;h3 id=&quot;어플리케이션끼리-같은-포트를-사용하는-이유&quot;&gt;어플리케이션끼리 같은 포트를 사용하는 이유?&lt;/h3&gt;
&lt;p&gt;서버 24시간 켜야하고, 주소가 일정해야 한다.
DNS는 주소만 해석함,  포트가 다르면 귀찮아짐&lt;/p&gt;

&lt;p&gt;트랜스포트 계층에서 하면 좋겠는거
데이타 무결성 - 이것만 가능!!!
타이밍
쓰루풋
보안&lt;/p&gt;

&lt;h2 id=&quot;http&quot;&gt;HTTP&lt;/h2&gt;
&lt;p&gt;하이퍼텍스트? - 택스트 인데 중간에 링크들이 있음
HTTP는 대부분 TCP를 사용해서 TCP 커넥션이 필요
HTTP- state less, 상태를 기억하지 않음&lt;/p&gt;

&lt;h3 id=&quot;persistent-http-연결을-재사용&quot;&gt;Persistent HTTP (연결을 재사용)&lt;/h3&gt;
&lt;p&gt;클라이언트에서 정보를 다 밭았다고 판단 했을때 TCP를 끊음 실제는 보통 persistent를 사용한다.&lt;/p&gt;
&lt;h3 id=&quot;non-persistent-http연결을-끊음&quot;&gt;non persistent HTTP(연결을 끊음)&lt;/h3&gt;
&lt;p&gt;TCP연결을 설정, 상대편이 설정하면 연결완료되면 HTTP통신을 한다.이후 TCP 끊음
1개 페이지가 여러개 로 구성되어 있다면 계속 TCP부터 연결&lt;/p&gt;

&lt;p&gt;실제로는 한번에 리소스 여러개 요청을 보낸다.(파이프라인 방식)&lt;/p&gt;

&lt;h2 id=&quot;소켓-프로그레밍&quot;&gt;소켓 프로그레밍&lt;/h2&gt;
&lt;p&gt;어플리케이션 프로그램 OS가 아니다. OS에서 제공하는 서비스를 사용 OS가 제공하는 인터페이스를 사용하는것이다.
TCP/UDP에 맞게 해당하는 소켓을 사용해서 데이터를 주고 받는다.&lt;/p&gt;

&lt;p&gt;socket(domain, type, protocol);
 bind() - 서버를 특정포트에 바인딩 / 클라이언트는 바인드 할필요가 없음 아무 포트사용해도 됨
 accept() -  listen()&lt;/p&gt;

&lt;p&gt;브라우저를 클라이언트로 하고 서버를 구현하는거를 수업시간에 시키는구나 요청한 파일을 전송해주는거를 진행한다.
index.html을 요청한다면 여기에 있는 리소도 같이 한다.ㅏ&lt;/p&gt;

&lt;h2 id=&quot;멀티-플랙싱과-디멀티-플랙싱&quot;&gt;멀티 플랙싱과 디멀티 플랙싱&lt;/h2&gt;
&lt;p&gt;TCP에서는 세그먼트를 주고 받는다. 데이터에 TCP헤더가 추가된것이다.
디멀티 플랙싱 - 세그먼트에 맞게 데이터를 전달 - 리시버 쪽에서
멀티플랙싱 - 다양한 데이터를 세그먼트로 만들어줌 - 샌더쪽에서 
헤더의 여러필드가 있는데 그중에서 중요한 것은 소스와 데스트네이션의 포트번호이다.
클라이 언트에서 소스 - 자기자신, 데스트네이션-서버&lt;/p&gt;

&lt;p&gt;TCP는 소켓을 구별 - 소스, 데스네이션 아이피와 포트번호 4가지 하나라도 틀리면 다른 소켓이다.
TCP 연결지향 - 특정 연결에 대한 소켓을 만든다. 자원소모가 크다.&lt;/p&gt;

&lt;p&gt;UDP 아무나 전달, 그냥 소켓으로 전달만함&lt;/p&gt;

&lt;p&gt;브로드 캐스트 - 각각 TCP연결을한다.&lt;/p&gt;

&lt;p&gt;UDP - 신뢰성 보장x, 트랜스포트에서 제공하는 것은 제공함&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;헤더필드&lt;/code&gt;에 있는 것들을 알아라
UDP 헤더 필드 
소스포트16/목적지포트16비트/길이-멀티플랙싱, 디멀티 플랙싱에 사용 /체크섬 4가지가 있다.
ㅊ큿ㅁ으로 에러 파악, 전송하지 않고 죽이는 식
TCP에 비해 간단하다.&lt;/p&gt;

&lt;p&gt;#DNS&lt;/p&gt;</content><author><name></name></author><summary type="html">네트워크 약자의 원래 이름과 왜 이런지 생각하기</summary></entry><entry><title type="html">2017년 10월 6일</title><link href="http://localhost:4000/TIL20171006/" rel="alternate" type="text/html" title="2017년 10월 6일" /><published>2017-10-06T00:00:00+09:00</published><updated>2017-10-06T00:00:00+09:00</updated><id>http://localhost:4000/TIL20171006</id><content type="html" xml:base="http://localhost:4000/TIL20171006/">&lt;h1 id=&quot;알고리즘&quot;&gt;알고리즘&lt;/h1&gt;
&lt;p&gt;1시간 하고 안되면 풀이 보기로 했는데 자꾸 오기가 생겨서 계속하게 된다. 오늘도 결국 풀이를 보고 말았다. 아직도 DP는 힘들다.&lt;/p&gt;

&lt;h2 id=&quot;1로-만들기&quot;&gt;1로 만들기&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/1463&quot;&gt;백준 저지&lt;/a&gt;문제이다. 어설프게 람다 공부했다고 자꾸 쓰고 있다. 잘하는건지 모르겠다.&lt;/p&gt;

&lt;h3 id=&quot;풀이&quot;&gt;풀이&lt;/h3&gt;
&lt;p&gt;재귀를 이용한다면 다음과 같다. 주어진 입력에 대하여 3가지 연산을 재귀적으로 진행하고 1이 되었을때 횟수를 리스트에 넣고 끝낸다.
리스트에서 최소값을 구한다. 이 풀이는 제출하면 시간초과 된다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BJ1463&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scanner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scanner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                                &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;풀이-2&quot;&gt;풀이 2&lt;/h3&gt;
&lt;p&gt;DP를 이용한다면 다음과 같다. 하지만 이 방법도 생각보다 느리다. 거의 3초(2956 MS)가 걸렸다. 자바가 느리긴 한데 이 정도 까지는 아닐 것이다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BJ1463&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scanner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scanner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;풀이-3&quot;&gt;풀이 3&lt;/h3&gt;
&lt;p&gt;solution이라는 함수가 꼬리 재귀가 아니라서 발생하는거 같다. 함수 호출을 하지 않는 방법으로 개선했다. 약 1/25 만큼 실행 시간이 줄어 들었다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BJ1463&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scanner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scanner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">알고리즘 1시간 하고 안되면 풀이 보기로 했는데 자꾸 오기가 생겨서 계속하게 된다. 오늘도 결국 풀이를 보고 말았다. 아직도 DP는 힘들다.</summary></entry><entry><title type="html">2017년 10월 5일 TIL</title><link href="http://localhost:4000/TIL20171005/" rel="alternate" type="text/html" title="2017년 10월 5일 TIL" /><published>2017-10-05T00:00:00+09:00</published><updated>2017-10-05T00:00:00+09:00</updated><id>http://localhost:4000/TIL20171005</id><content type="html" xml:base="http://localhost:4000/TIL20171005/">&lt;h1 id=&quot;알고리즘&quot;&gt;알고리즘&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/2579&quot;&gt;계단오르기&lt;/a&gt;문제를 했다. 처음에 점화식을 잘못 해서 많은 시간을 소모했다. 이제는 문제당 최대 1시간 제한을 두어야 겠다.&lt;/p&gt;

&lt;h2 id=&quot;풀이&quot;&gt;풀이&lt;/h2&gt;
&lt;p&gt;규칙을 생각해보면&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;한번 혹은 2번 오를 수 있고&lt;/li&gt;
  &lt;li&gt;마지막 계단은 밟아야한다.&lt;/li&gt;
  &lt;li&gt;연속 3개의 계단을 밟을수 없다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;마지막 계단과 이전계단, 마지막 계단과 n-2계단 
마지막계단과 이전계단을 오르는 경우 반드시 n-3번째 계단에서 나와야한다. 한번(n-2는 3번연속으로 되어서 불가능) 혹은 2번(n-3에서 n-1로) 오를수 있기 때문이다.
그러므로 점화식은 다음과 같다. &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;DP[n] = max(in[n] + DP[n-2] + in[n] + in[n-1] + DP[n-3])&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;구현&quot;&gt;구현&lt;/h2&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.*&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BJ2579&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scanner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scanner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h1 id=&quot;네트워크&quot;&gt;네트워크&lt;/h1&gt;
&lt;p&gt;KOCW에서 &lt;a href=&quot;http://www.kocw.net/home/search/kemView.do?kemId=1169634&amp;amp;ar=relateCourse&quot;&gt;괜찮은 강의&lt;/a&gt;를 찾았다. 설명을 너무 잘해주신다.&lt;/p&gt;

&lt;h2 id=&quot;tcp-vs-udp&quot;&gt;TCP vs UDP&lt;/h2&gt;
&lt;p&gt;UDP : 빠르다. 그냥 보내니까 하지만 보장이 안됨(not reliable) 아무 의미 없는 속도가 될 수 있다. 리얼타임이 필요하고 유실된게 티가 안나는 경우(voip), 우체통에 넣는것에 비유
TCP - 대부분에사용 내생각에는 동영상도 이거해야 되지 않나 책에서는 UDP를 쓰라는데 내 아이돌이 깨지면 마음 아프겠다. 등기 우편 - 안정적이지만 비쌈, 비용(리소스)가 든다.&lt;/p&gt;

&lt;h3 id=&quot;tcp&quot;&gt;TCP&lt;/h3&gt;
&lt;p&gt;연결지향방식 - ㅅTCP
flow-control
-샌더와 리시버가 맞도록
congestion control&lt;/p&gt;

&lt;h3 id=&quot;udp&quot;&gt;UDP&lt;/h3&gt;
&lt;p&gt;연결 x
컨트롤 x
아무것도 안해준다.&lt;/p&gt;

&lt;h2 id=&quot;프로토콜&quot;&gt;프로토콜&lt;/h2&gt;
&lt;p&gt;메시지를 주고 받기위한 준비 동작&lt;/p&gt;

&lt;h2 id=&quot;스위칭&quot;&gt;스위칭&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;서킷스위칭 : 과거 유선전화에서 사용, 출발지에서 목적지에서 길을 예약&lt;/li&gt;
  &lt;li&gt;패킷 스위칭 : 인터넷에서 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;서킷 스위칭에서는 1개의 라우터에서 1Mbps의 대역폭을 가지고 각 사용자에서 100kbps를 필요로 한다면 10명까지 이용 가능하다. 보통은 인터넷에 연결하는 것은 짧은 순간(웹페이지를 가져오는 경우 등)이므로 회선이 사용되지 않는 시간이 많다. &lt;br /&gt;
패킷스위칭은 같은 환경에서 사용할 수 있는 만큼 회선을 사용이 가능하다. 정확히 동일한 시간에 10명이 요청을 보내는게 아니라면 제한없이 사용이 가능하다. 하지만 요청이 많은경우(티케팅, 수강신청)에서 문제
인터넷사용은 한번 가져온 다음에 사용안하는 기간이 많다. 그래서 서킷 스위칭은 낭비되서 인터넷에서는 패킹스위칭 사용한다.&lt;/p&gt;

&lt;h2 id=&quot;딜레이&quot;&gt;딜레이&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;프로세싱 딜레이 : 패킷의 목적지를 확인할때 걸리는 시간. 라우터를 좋은거로 바꾸는 방법으로 개선한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;큐잉 딜레이&lt;/code&gt; : 유저가 많이 들어와서 감당가능한 bandwith보다 크게되면 문제가 생긴다. 그래서 큐가 존재 하게 됨, 큐에서 기다리는 시간이 큐잉 딜레이다. &lt;code class=&quot;highlighter-rouge&quot;&gt;가장 힘든 문제&lt;/code&gt; 사용자수는 바꿀수 없기 때문이다.&lt;/li&gt;
  &lt;li&gt;트랜스미션 딜레이 - 패킷의 첫번째비트부터 마지막 비트까지 나가는 시간 - (패킷 크기/링크bandwith)더 좋은 bandwith 사용함으로써 개선&lt;/li&gt;
  &lt;li&gt;프로파게이션 딜레이 - 물리적 링크의 크기 / 프로파게이션 속도로 계산된다. 전파 속도에 영향을 받는다. 자연적이라서 사람이 어떻게 할수가 없다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;패킷-스위칭의-문제---큐&quot;&gt;패킷 스위칭의 문제 - 큐&lt;/h3&gt;
&lt;p&gt;큐 크기보다 더 큰게 들어오면???
유실된다. 대부분의 유실은 큐 크기를 넘어 가서 유실됨
해결을 위해 큐를 여러개를 둔다!!!
사람이 적으면 대기없이 사용
사람이 많으면 대기가 커짐
TCP에서 패킷이 도착하지 않는다면 재전송이 필요함 재전송은 &lt;code class=&quot;highlighter-rouge&quot;&gt;1. 시작점 부터(인터넷)&lt;/code&gt;할 수 있고  2. 손실된곳부터 재전송을 할 수 있다.
종단에서 제어하고 중간의 라우터들은 전달만 한다. 다른걸하면 느려지기 때문이다.&lt;/p&gt;</content><author><name></name></author><summary type="html">알고리즘 계단오르기문제를 했다. 처음에 점화식을 잘못 해서 많은 시간을 소모했다. 이제는 문제당 최대 1시간 제한을 두어야 겠다.</summary></entry><entry><title type="html">2017년 10월 4일 TIL</title><link href="http://localhost:4000/TIL20171004/" rel="alternate" type="text/html" title="2017년 10월 4일 TIL" /><published>2017-10-04T00:00:00+09:00</published><updated>2017-10-04T00:00:00+09:00</updated><id>http://localhost:4000/TIL20171004</id><content type="html" xml:base="http://localhost:4000/TIL20171004/">&lt;h1 id=&quot;os&quot;&gt;OS&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;../OS3&quot;&gt;운영체제 3&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;네트워크&quot;&gt;네트워크&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://www.google.co.kr/search?q=%EC%84%B1%EA%B3%B5%EA%B3%BC+%EC%8B%A4%ED%8C%A8%EB%A5%BC+%EA%B2%B0%EC%A0%95%ED%95%98%EB%8A%94+1%25+%EC%9D%98+%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC+%EC%9B%90%EB%A6%AC&quot;&gt;성공과 실패를 결정하는 1% 네트워크 원리&lt;/a&gt;책이 설명이 잘되어 있는거 같아서 좋은거 같다. 하지만 단종된 책이다. 일단 도서관에서 빌렸는데 중고라도 알아 봐야 겠다.&lt;/p&gt;

&lt;h2 id=&quot;http에서-사용되는-url&quot;&gt;HTTP에서 사용되는 URL&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;../HTTP공부하기4&quot;&gt;HTTP공부하기 4&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;ip주소와-도메인&quot;&gt;IP주소와 도메인&lt;/h2&gt;
&lt;p&gt;브라우저는 HTTP 메세지를 만들 수 있지만, 요청은 불가능하다. 브라우저도 User프로그램 이기 때문이다. 그래서 OS에 의뢰해서 송신한다. 하지만 OS에 의뢰하기 전에 도메인명대신 IP주소로 상대를 지정해야한다.&lt;/p&gt;

&lt;h3 id=&quot;ip-주소&quot;&gt;IP 주소&lt;/h3&gt;
&lt;p&gt;엑세스 대상의 서버까지 메시지를 전송할 때 IP주소는 32비트(IPv4)의 주소로 네트워크 번호와 호스트 번호로 이루어져 있다. 네트워크 번호와 호스트 번호는 사용자가 정한다. 이것을 나타내는 정보를 넷마스크 라고한다. 넷마스크는 다음과 같이 표한한다. 비트 수를 나타낼수도 있고 IP주소와 같이 나타낼 수 있다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;123.456.789.2/255.255.255.0
123.456.789.2/24
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;리졸버&quot;&gt;리졸버&lt;/h3&gt;
&lt;p&gt;DNS에 도메인을 조회 하고 해당되는 IP를 불러 오는 프로그램 이 동작을 Name resolution이라고 부른다.&lt;/p&gt;

&lt;h1 id=&quot;java&quot;&gt;JAVA&lt;/h1&gt;
&lt;h2 id=&quot;string의-최대-크기-배열의-최대크기&quot;&gt;String의 최대 크기, 배열의 최대크기&lt;/h2&gt;
&lt;p&gt;둘 다 최대 크기는 Integer.MAX_VALUE이다. 알고리즘 문제 푸는 경우 조심해야한다. 물론 charAt()도 문서를 보면 charAt(int)이다.&lt;/p&gt;

&lt;h1 id=&quot;알고리즘&quot;&gt;알고리즘&lt;/h1&gt;
&lt;p&gt;레퍼런스를 안보고 최초로 DP문제를 맞췄다. 많이 뿌듯하다. 따로 배열을 만들지 않아도 풀리는 쉬운 문제 지만&lt;/p&gt;
&lt;h2 id=&quot;숫자-삼각형&quot;&gt;숫자 삼각형&lt;/h2&gt;
&lt;p&gt;삼각형에서 아래쪽과 오른쪽으로 더해 나가는데 여기서 최대 값을 구하는것이다.
&lt;a href=&quot;https://www.acmicpc.net/problem/1932&quot;&gt;백준 저지&lt;/a&gt;문제이다.
0번 col을 먼저 누적해서 더해준다. 삼각형을 입력으로 들어오는 모양으로 생각하면 
점화식은 DP[row][col] = DP[row][col] + max(DP[row-1][col-1], DP[row-1][col])이 된다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BJ1932&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scanner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scanner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[][]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAsInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">OS 운영체제 3</summary></entry><entry><title type="html">Operating System 3</title><link href="http://localhost:4000/OS3/" rel="alternate" type="text/html" title="Operating System 3" /><published>2017-10-04T00:00:00+09:00</published><updated>2017-10-04T00:00:00+09:00</updated><id>http://localhost:4000/OS3</id><content type="html" xml:base="http://localhost:4000/OS3/">&lt;h1 id=&quot;process-개념&quot;&gt;Process 개념&lt;/h1&gt;
&lt;p&gt;OS에서 가장 중요한 엔티티가 프로세스이다. 프로세스를 중심으로 CPU의 할당과 동작이 이루어진다.
컴퓨터 시스템에 여러가지 일(인터럽트, 자원 점유 등)이 일어나는 원인과 결과를 귀속시킬 대상이ㅏ.&lt;/p&gt;

&lt;h2 id=&quot;프로세스의-특징&quot;&gt;프로세스의 특징&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;프로그램을 수행시키는 기본 주체, 런타임 시스템의 &lt;code class=&quot;highlighter-rouge&quot;&gt;수행 주체&lt;/code&gt;, CPU같은 &lt;code class=&quot;highlighter-rouge&quot;&gt;자원을 할당하는 대상&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;컴퓨터 시스템에 많은 일들이 일어나는 데 이를 정리하는 Decomposition의 한 유닛&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;복잡한-시스템의-중요한-2가지&quot;&gt;복잡한 시스템의 중요한 2가지&lt;/h3&gt;
&lt;p&gt;Abstraction : 추상화
Decompostion : 복잡한 문제를 단순한 여러 문제로 나눈다. 소프트웨어의 &lt;code class=&quot;highlighter-rouge&quot;&gt;복잡성을 해소&lt;/code&gt; 한다. 구현도 작은거를 조합해서 만든다. 
복잡하면 -&amp;gt; 쪼갠다. -&amp;gt; 각 조각이 관리될 수있을때까지 쪼갠다. -&amp;gt; 수행의 단위가 되었을때 process라고 할수 있다.&lt;/p&gt;

&lt;h2 id=&quot;프로세스의-정의&quot;&gt;프로세스의 정의&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;수행중인 프로그램&lt;/code&gt;(Program in excution)&lt;br /&gt;
특정 프로세스 위에서 실행되는 스트림&lt;/p&gt;

&lt;h2 id=&quot;프로그램-vs-프로세스&quot;&gt;프로그램 vs 프로세스&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;프로그램 : 저장매체에 저장된 수동적인 코드 시퀀스, 수동적&lt;/li&gt;
  &lt;li&gt;프로세스 : 실행하면 프로세스, 능동적(excution stream(Thread))&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;OS는 실행가능한 파일을 메모리에 로드 한다. 그리고 CPU를 할당한다. 프로세스는 실행중 IO디바이스 같은 자원을 사용한다.&lt;/p&gt;

&lt;h2 id=&quot;process-state&quot;&gt;Process State&lt;/h2&gt;
&lt;p&gt;프로그램이 실행될떄 기억해야하는 콜렉션 정보&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Memory Context
    &lt;ul&gt;
      &lt;li&gt;Code, Data(프로그램의 전역 변수), Stack(지역 변수, 함수를 위한 공간들) (3가지는 컴파일러, 로더와 관련), Heap&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;HW Context : CPU, IO
    &lt;ul&gt;
      &lt;li&gt;Register values&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;System Context : Per-Proc Kernel Infomation(커널이 관리하는 프로세스 정보)
    &lt;ul&gt;
      &lt;li&gt;Process Table, Open file Table, Page Table&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;excution-stream&quot;&gt;Excution stream&lt;/h2&gt;
&lt;p&gt;프로세스가 첫번째 부터 명령어 부터 지금까지 수행한 모든 명령어들의 순서&lt;/p&gt;

&lt;h2 id=&quot;용어-정리&quot;&gt;용어 정리&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;멀티프로그래밍 : 여러개의 Active Process가 Load(메모리 관점)&lt;/li&gt;
  &lt;li&gt;유니프로그래밍 : 메인 메모리에 한개만 로드&lt;/li&gt;
  &lt;li&gt;멀티 프로세싱 : Cpu가 여러개를 다중화(Cpu관점)&lt;/li&gt;
  &lt;li&gt;Swapping : 메모리 부족 문제를 해결하기 위해 CPU를 사용하지 않는 프로세스의 데이터를 메모리에서 다른 저장 장치로 내보내고 CPU를 사용할 프로세스의 데이터를 메모리로 로드&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;design-time-entity로써의-프로세스&quot;&gt;Design-time Entity로써의 프로세스&lt;/h2&gt;
&lt;p&gt;SW System 개발 과정&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;설계(상대적으로 어려움) :
 요구사항 명세서 -&amp;gt; 설계 -&amp;gt; task(독립적 구성요소)의 set&lt;/li&gt;
  &lt;li&gt;구현(상대적으로 쉬움) : 
 task set -&amp;gt; 구현 -&amp;gt; program(코드) set
Task들이 Process와 Mapping되므로 바로 runtime이 될수 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;프로그램 = &lt;code class=&quot;highlighter-rouge&quot;&gt;데이터 구조&lt;/code&gt; + 알고리즘&lt;br /&gt;
데이터 구조가 어떻게 되는가? 알고리즘이 어떻게 되는가에 대해 고민
자료구조로써의 프로세스(메모리,hw,system) 구현
pcb,proc table..&lt;/p&gt;

&lt;h3 id=&quot;pcb에-저장되는-내용들&quot;&gt;PCB에 저장되는 내용들&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;프로세스 상태&lt;/li&gt;
  &lt;li&gt;프로그램 카운터&lt;/li&gt;
  &lt;li&gt;CPU 레지스터&lt;/li&gt;
  &lt;li&gt;CPU 스케줄링 정보&lt;/li&gt;
  &lt;li&gt;주기억장치 관리 정보 - base, bound&lt;/li&gt;
  &lt;li&gt;회계 정보(통계정보)&lt;/li&gt;
  &lt;li&gt;입출력 상태정보&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;프로세스-구조화&quot;&gt;프로세스 구조화&lt;/h2&gt;
&lt;p&gt;프로세스의 정보를 저장-Process control block
구현? -&amp;gt; Array(구현과 관리가 쉬움, 개수가 제한 됨),Linked List(개수가 제한 x) - Process Table
메모리 context
하드웨어 context
시스템 context&lt;/p&gt;

&lt;h2 id=&quot;프로세스-상태&quot;&gt;프로세스 상태&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;new&lt;/li&gt;
  &lt;li&gt;ready&lt;/li&gt;
  &lt;li&gt;runing&lt;/li&gt;
  &lt;li&gt;wating&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;프로세스-생명주기&quot;&gt;프로세스 생명주기&lt;/h2&gt;
&lt;p&gt;프로세스가 생성되서 종료될떄까지의 상태 전이
프로세스생성(new) -&amp;gt; ready(active이지만 cpu 못받음{ready queue}) -&amp;gt; running(수행중 0~1) -&amp;gt; waiting(이벤트 발생으로 cpu넘겨줌, 여러개의 프로세스가 가능, 이유가 여러개 waiting이유마다 큐가 각각존재{devicequeue}) -&amp;gt; ready&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;ready queue - pcb의 링크드 리스트
프로세스가 생성되면 pcb를 할당하고 프로세스를 일련의 조건에 따라서 상태를 전이시킴
구현 - ready queue, waiting queue
runing -&amp;gt; ready - cpu 선점 당했을떄
watting-&amp;gt;ready-&amp;gt; 원하는 이벤트가 발생하면&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Process 개념 OS에서 가장 중요한 엔티티가 프로세스이다. 프로세스를 중심으로 CPU의 할당과 동작이 이루어진다. 컴퓨터 시스템에 여러가지 일(인터럽트, 자원 점유 등)이 일어나는 원인과 결과를 귀속시킬 대상이ㅏ.</summary></entry><entry><title type="html">HTTP 공부하기 4</title><link href="http://localhost:4000/HTTP%EA%B3%B5%EB%B6%80%ED%95%98%EA%B8%B04/" rel="alternate" type="text/html" title="HTTP 공부하기 4" /><published>2017-10-04T00:00:00+09:00</published><updated>2017-10-04T00:00:00+09:00</updated><id>http://localhost:4000/HTTP%EA%B3%B5%EB%B6%80%ED%95%98%EA%B8%B04</id><content type="html" xml:base="http://localhost:4000/HTTP%EA%B3%B5%EB%B6%80%ED%95%98%EA%B8%B04/">&lt;h1 id=&quot;http-공부하기-4&quot;&gt;HTTP 공부하기 4&lt;/h1&gt;
&lt;p&gt;네트워크 책에 HTTP와 연결해서&lt;/p&gt;

&lt;h2 id=&quot;urluniform-resource-locater&quot;&gt;URL(Uniform Resource Locater)&lt;/h2&gt;
&lt;p&gt;브라우저에 입력하는 주소. 브라우저가 처음하는 일은 웹서버에 보내는 리퀘스트의 메시지를 작성하기 위해 URL을 해독한다. 
아래는 “http프로토콜로 twibeat.github.io라는 주소의 웹서버의 80번 포트에서 resource/index.html을 가져온다. 쿼리로 test값 1을 제공하고 chap1부분을 가져온다.”라는 의미이다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://twibeat.github.io:80/resource/index.html?test=1#chap1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;스키마&quot;&gt;스키마&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;http:&lt;/code&gt;에 해당한다. ex) ftp:, file:, mailto: 등&lt;/p&gt;

&lt;h3 id=&quot;웹-서버-주소&quot;&gt;웹 서버 주소&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;twibeat.github.io&lt;/code&gt;에 해당한다. ex) google.com 등&lt;/p&gt;

&lt;h3 id=&quot;포트-번호&quot;&gt;포트 번호&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;80&lt;/code&gt;에 해당한다. &lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt; 이후에 나온다. 임의로 할당한 포트가 아니라면 생략 가능하다. ex) 80(HTTP), 443(HTTPS) 등&lt;/p&gt;

&lt;h3 id=&quot;데이터-경로&quot;&gt;데이터 경로&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/resource/index.html&lt;/code&gt;에 해당한다. 
api로 받아오는 json이나 xml도 해당 포맷의 파일을 가져오는것이다.&lt;/p&gt;

&lt;h3 id=&quot;쿼리-문자열&quot;&gt;쿼리 문자열&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;test=1&lt;/code&gt;에 해당한다. &lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt;뒤에 나온다. &lt;code class=&quot;highlighter-rouge&quot;&gt;test=1&amp;amp;years=2017&lt;/code&gt;처럼 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt;로 여러개를 사용가능하다. 구글이나 네이버 같은 검색사이트에서 검색하면 자주 볼 수 있다.
생략가능하다.&lt;/p&gt;

&lt;h3 id=&quot;프래그-먼트-식별자&quot;&gt;프래그 먼트 식별자&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;chap1&lt;/code&gt;에 해당한다. &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt;뒤에 나올수있고 여러개가 &lt;code class=&quot;highlighter-rouge&quot;&gt;,&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt;를 이용해서 같이 쓰인다. 자주 보이지 는 않지만, 지메일을 사용할때 브라우저 창을 보면 볼 수 있다. 생략가능하다.
&lt;a href=&quot;https://en.wikipedia.org/wiki/Fragment_identifier&quot;&gt;위키 피디아&lt;/a&gt;에 잘 설명되어 있다.&lt;/p&gt;

&lt;h2 id=&quot;uriuniform-resource-identifier&quot;&gt;URI(Uniform Resource Identifier)&lt;/h2&gt;
&lt;p&gt;URL이 네트워크상 위치를 나타낸다면, URI는 리소스를 식별하기 위한 문자열을 나타낸다.&lt;br /&gt;
다음과 같은 것도 URI에 해당 된다. URL은 URI의 서브셋이다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tel:+82-031-123-1234
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Uniform: 여러가지 종류의 리소스 지정 방법을 같은 맥락에서 구별 없이 취급 할 수 있도록한다.&lt;/li&gt;
  &lt;li&gt;Resource : 식별 가능한 모든 것&lt;/li&gt;
  &lt;li&gt;Identifier : 식별 가능한 것을 참조 하는 오브젝트&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">HTTP 공부하기 4 네트워크 책에 HTTP와 연결해서</summary></entry><entry><title type="html">2017년 10월 1일 TIL</title><link href="http://localhost:4000/TIL20171001/" rel="alternate" type="text/html" title="2017년 10월 1일 TIL" /><published>2017-10-01T00:00:00+09:00</published><updated>2017-10-01T00:00:00+09:00</updated><id>http://localhost:4000/TIL20171001</id><content type="html" xml:base="http://localhost:4000/TIL20171001/">&lt;h1 id=&quot;알고리즘&quot;&gt;알고리즘&lt;/h1&gt;
&lt;p&gt;최소 신장트리 관련 문제가 나와서 최소 신장트리 찾기에 대해서 공부해보려고 한다.&lt;/p&gt;

&lt;h2 id=&quot;신장-트리spaning-tree&quot;&gt;신장 트리(Spaning Tree)&lt;/h2&gt;
&lt;p&gt;그래프의 모든 정점을 지나는 트리&lt;/p&gt;

&lt;h2 id=&quot;최소-신장-트리&quot;&gt;최소 신장 트리&lt;/h2&gt;
&lt;p&gt;가중치 그래프의 모든 정점을 지나는 트리 중 가중치의 합이 제일 작은 트리&lt;/p&gt;

&lt;h2 id=&quot;프림prim-알고리즘&quot;&gt;프림(Prim) 알고리즘&lt;/h2&gt;
&lt;p&gt;현재 방문한 정점에서 가장 가중치가 작은 정점을 연결한다. 이를 반복하는 방법 &lt;a href=&quot;https://ko.wikipedia.org/wiki/%ED%94%84%EB%A6%BC_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98&quot;&gt;위키&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;구현&quot;&gt;구현&lt;/h3&gt;
&lt;p&gt;다음 코드는 프림 알고리즘을 이용해 최소 신장 트리의 비용을 구하는 코드이다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[][]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selectVertex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;selectVertex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[][]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MAX_VALUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minStart&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minEnd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;minValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;minStart&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;minEnd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minEnd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minEnd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;selectVertex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id=&quot;크루스컬kruskal-알고리즘&quot;&gt;크루스컬(Kruskal) 알고리즘&lt;/h2&gt;
&lt;p&gt;간선을 가장 비용이 적은 순으로 정렬하고 정렬된 순서대로 트리에 추가한다. 사이클이 만들어 진다면 제거하고 넘어간다.
&lt;a href=&quot;http://terms.naver.com/entry.nhn?docId=3579408&amp;amp;cid=59086&amp;amp;categoryId=59093&quot;&gt;네이버 캐스트&lt;/a&gt;에 설명이 잘 되어 있다.&lt;/p&gt;

&lt;h2 id=&quot;구현-1&quot;&gt;구현&lt;/h2&gt;
&lt;p&gt;다음 코드는 크루스칼 알고리즘을 이용해 최소 신장 트리의 비용을 구하는 코드이다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Edge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Edge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;weight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;kruskal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Edge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edges&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vertexSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Edge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edgeStack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;edges&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);});&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Edge&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;edge:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edges&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;edgeStack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;vertexSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;vertexSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;// (간선의 수 + 1 == 정점의 수)를 만족 해야 한다.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edgeStack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vertexSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;edgeStack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;vertexSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;vertexSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;os&quot;&gt;OS&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;../OS2&quot;&gt;운영체제2&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">알고리즘 최소 신장트리 관련 문제가 나와서 최소 신장트리 찾기에 대해서 공부해보려고 한다.</summary></entry><entry><title type="html">Operating System 2</title><link href="http://localhost:4000/OS2/" rel="alternate" type="text/html" title="Operating System 2" /><published>2017-10-01T00:00:00+09:00</published><updated>2017-10-01T00:00:00+09:00</updated><id>http://localhost:4000/OS2</id><content type="html" xml:base="http://localhost:4000/OS2/">&lt;p&gt;운영체제는 크고 복잡하다. 계속적인 개발을 필요로 한다.&lt;/p&gt;

&lt;h2 id=&quot;os의-기능&quot;&gt;os의 기능&lt;/h2&gt;
&lt;p&gt;중재, 추상화, 기본 라이브러리&lt;/p&gt;
&lt;h2 id=&quot;중재&quot;&gt;중재&lt;/h2&gt;
&lt;p&gt;Coodinator - 충돌에 대한 중재&lt;/p&gt;
&lt;h2 id=&quot;추상화-illusion-generator&quot;&gt;추상화 Illusion generator&lt;/h2&gt;
&lt;p&gt;런타임 기능들(화면 표시, 키보드입력 등)을 제공
복잡한 것을 추상화시킴(HW를 몰라도 인터페이스를 제공)
추상레이어를 제공함, 여러유저에게 동일하게 제공함&lt;/p&gt;

&lt;h3 id=&quot;추상화의-사례&quot;&gt;추상화의 사례&lt;/h3&gt;
&lt;p&gt;timesharing threshing
쓰레싱-타자를쳤는데 전달이 늦게됨,(원격접속할때 느끼지 않나?),사용자의 수가 일정 수준 넘으면 발생,tiemsharing(추상화 기능중 하나)의 task의 수가 너무 많음&lt;/p&gt;
&lt;h2 id=&quot;기본-라이브러리&quot;&gt;기본 라이브러리&lt;/h2&gt;
&lt;p&gt;제공되는 드라이브들을 활용해서 프로그램을 작성 가능&lt;/p&gt;

&lt;h2 id=&quot;os-구조&quot;&gt;OS 구조&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;cpu&lt;/li&gt;
  &lt;li&gt;메모리&lt;/li&gt;
  &lt;li&gt;IO&lt;/li&gt;
  &lt;li&gt;파일 시스템 : 하드디스크-io&lt;/li&gt;
  &lt;li&gt;네트워크 시스템 : 네트워크 자료-io&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;io-장치의-3분류&quot;&gt;I/O 장치의 3분류&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Char I/O&lt;/li&gt;
  &lt;li&gt;Block I/O (대용량 데이터) - 파일시스템
io관리를 어떻게 하는가에 따라 성능이 결정된다.&lt;/li&gt;
  &lt;li&gt;Network I/O (소켓같은거):
큐에 데이터가 들어있다. 막히면 빨리가려고 해도 빨리 갈 수가 없음. 비디오같은게 지연 되면 문제가 된다. -&amp;gt; 속도에 민감한 패킷은 별로의 큐로 보낸다. 패킷스케줄링은  네트워크가 영향을 많이 받는다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;캐쉬&quot;&gt;캐쉬&lt;/h3&gt;
&lt;p&gt;강의실로 데이터를 가져 온다면 캐쉬는 학교 정문에서 가져오는 정도이고 디스크는 달나라에서 가져오는 정도이다.
캐쉬를 메모리를 이용해서 소프트웨어적으로 구현할수도 있다.(디스크 캐시)&lt;/p&gt;

&lt;h1 id=&quot;하드웨어-구성요소&quot;&gt;하드웨어 구성요소&lt;/h1&gt;

&lt;h2 id=&quot;시스템버스&quot;&gt;시스템버스&lt;/h2&gt;
&lt;p&gt;CPU - Memory - IO디바이스와 연결
버스는 Read와 Write 연산을 한다.
io디바이스는 컨트롤러를 가지고 있다.
이는 시스템 버스에 연결되어 있다.&lt;/p&gt;
&lt;h3 id=&quot;data-bus&quot;&gt;Data Bus&lt;/h3&gt;
&lt;p&gt;실제 데이터를 전달&lt;/p&gt;

&lt;h3 id=&quot;address-bus&quot;&gt;Address Bus&lt;/h3&gt;
&lt;p&gt;데이터의 Source와 Destnation지정&lt;/p&gt;

&lt;h3 id=&quot;bus-master&quot;&gt;bus master&lt;/h3&gt;
&lt;p&gt;버스를 사용할 수 있는 장치, 버스 사용을 위해서는 버스를 장악해야한다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;CPU&lt;/li&gt;
  &lt;li&gt;I/O Controller&lt;/li&gt;
  &lt;li&gt;DMA&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bus-slave&quot;&gt;Bus Slave&lt;/h3&gt;
&lt;p&gt;데이터를 담고 있는 장치, 주소를 가지고 있다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Memory&lt;/li&gt;
  &lt;li&gt;IO Controller(장치의 Register)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bus중재기&quot;&gt;bus중재기&lt;/h3&gt;
&lt;p&gt;여러 마이스터가 버스를 요청하므로 조정해야한다.
리퀘스트 시그널을 받고 우선순위가 높은 거에 먼저 버스를 제공 grant신호를 받아서&lt;/p&gt;

&lt;h2 id=&quot;io-controller&quot;&gt;I/O Controller&lt;/h2&gt;
&lt;p&gt;cpu가 데이터 레지스터에 데이터가 저장되고 output명령, io장치가 가용하면 i/o수행&lt;/p&gt;

&lt;h3 id=&quot;폴링-vs-인터럽트&quot;&gt;폴링 vs 인터럽트&lt;/h3&gt;
&lt;p&gt;Polling : I/O컨르롤러의 레지스터를 확인하면서 I/O가 끝날떄까지 기다림&lt;/p&gt;

&lt;h3 id=&quot;메모리맵-vs-포트맵io맵&quot;&gt;메모리맵 vs 포트맵(io맵)&lt;/h3&gt;
&lt;p&gt;I/O Maped I/O : 장치를 위한 별도의 공간을 마련, Intel
Memory Maped I/O : 메모리의 일부를 사용함,&lt;/p&gt;

&lt;h2 id=&quot;dma-controller&quot;&gt;DMA Controller&lt;/h2&gt;
&lt;p&gt;대부분은 char I/O이지만, DMA는 block I/O같은 경우씀  끝나면 인터럽트
DMA는 CPU가 관여하지 않고 IO를 가능하게 한다. 이를 위해서 
CPU가 OP명령, DMA에 시작 주소, Block크기를 DMA로 넘겨준다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;싸이클 스틸링 : CPU가 버스를 사용하지 않을 때 점유 했다가 돌려줌&lt;/li&gt;
  &lt;li&gt;블록 트랜스퍼 : 대등하게 버스를 사용함&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;hw-매커니즘&quot;&gt;HW 매커니즘&lt;/h1&gt;
&lt;h2 id=&quot;인터럽트-매커니즘&quot;&gt;인터럽트 매커니즘&lt;/h2&gt;
&lt;p&gt;OS를 위해서 HW가 지원하는 기능중 가장 중요한 기능 
OS는 Interrupt Driven 하다.&lt;/p&gt;
&lt;h3 id=&quot;hw인터럽트&quot;&gt;HW인터럽트&lt;/h3&gt;
&lt;p&gt;cpu외부에서 cpu가 필요한 걸 알려줌, &lt;code class=&quot;highlighter-rouge&quot;&gt;비동기적&lt;/code&gt;, 진행중에 갑자기 다른 일을 하게 되는 것, 프로세서에 인터럽트 시그널을 받는 Pin이 있어야한다. Pin에는 Interrupt 소스(IO 컨트롤러 등)가 연결되어 있다.&lt;/p&gt;

&lt;h3 id=&quot;sw-인터럽트trap&quot;&gt;SW 인터럽트(Trap)&lt;/h3&gt;
&lt;p&gt;현재 수행하려는 것에 문제가 있을때(Exception), 임의로 int발생, 코드분석을 통해서 어디서 발생했는지 알수있다. &lt;code class=&quot;highlighter-rouge&quot;&gt;동기적&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;개념의 이해 - 왜?? 어떻게??&lt;/p&gt;

&lt;p&gt;int source -io장치들&lt;/p&gt;

&lt;h3 id=&quot;인터럽트-과정&quot;&gt;인터럽트 과정&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;현재 수행중인 프로그램의 명령어를 끝내고, 현재 상태(PC값 등)를 저장&lt;/li&gt;
  &lt;li&gt;현재 수행중인 프로그램을 중단.&lt;/li&gt;
  &lt;li&gt;IRQ번호를 확인&lt;/li&gt;
  &lt;li&gt;벡터 테이블(ISR들이 저장) 검색&lt;/li&gt;
  &lt;li&gt;ISR로 점프 후 수행&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;프로그래머블-인터럽트-컨트롤러&quot;&gt;프로그래머블 인터럽트 컨트롤러&lt;/h3&gt;
&lt;p&gt;시스템이 복잡해지면서 인터럽트 핀이 많이 필요해짐 -&amp;gt; 확장성(scalebility)의 문제를 해결하기 위함.
입력 라인이 16개 까지 처리 가능하다면 그 이상이면 새로추가한다. 원래 핀에 여러개를 연결함으로 써 cascading으로 구현 한다.
특정 인터럽트를 disable시키는 경우가 필요&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Flag : 값에 따라 on, off, ISR 이 16개라면 flag가 16비트&lt;/li&gt;
  &lt;li&gt;Mask regster : flag를 제어하기 위해 인터럽트 마스크하는 IO연산이 필요함(sw)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;hw-protection&quot;&gt;HW protection&lt;/h2&gt;
&lt;p&gt;멀티 프로그래밍을 할때 여러 JOB이있는데 자신의 메모리가 아니라 다른 JOB의 메모리에  접근할 수 있어서
그를 막기위해 base레지스터와 bound 레지스터사용&lt;/p&gt;

&lt;h3 id=&quot;priviliged-instruction-실행을-위한-mode&quot;&gt;Priviliged instruction 실행을 위한 Mode&lt;/h3&gt;
&lt;p&gt;mode : 컴퓨터의 레지스터에 의해 결정(사람의 mood와 관련지어서 이해) &lt;br /&gt;
mode = 0 kernel : privileged mode, superviser mode라고도 불림, Priviliged Instruction 수행가능  &lt;br /&gt;
mode = 1 user : Privileged instruction(메모리접근 같은거)은 불가&lt;br /&gt;
user 프로그램은 기본적으로 신뢰하지 않는다. (버그가 있을 수 있기 때문) 그래서 통제적인 환경에서 수행 해야함.
명령을 해석할때 mode bit를 확인한다.&lt;/p&gt;

&lt;h3 id=&quot;os가-커널-모드에서-수행될-때-부여받는-주요-권한&quot;&gt;OS가 커널 모드에서 수행될 때 부여받는 주요 권한&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;모든 메모리 접근&lt;/li&gt;
  &lt;li&gt;Privileged 명령어 사용&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;어떻게-모드를-바꾸어야-하는가&quot;&gt;어떻게 모드를 바꾸어야 하는가?&lt;/h3&gt;
&lt;p&gt;모드를 os(무한신뢰의대상)가 정하도록한다.&lt;br /&gt;
User가 I/O가 필요함(HW매커니즘이필요) -&amp;gt; Interrupt를 요청하면 커널모드로 해줌(SW INT)
Kernel에서 User로 가는 상황은 문제가 거의 없음&lt;/p&gt;

&lt;p&gt;인터럽트는 낮은 수준, 함수 호출(High)로 가능하게 하는것은 System Call&lt;/p&gt;

&lt;h3 id=&quot;io-보호&quot;&gt;I/O 보호&lt;/h3&gt;
&lt;p&gt;여러 JOB들이 다른JOB을  건드리지 않도록, I/O를 특정 프로세스가 통제하는 것
-&amp;gt;privileged inst.로 접근 함수를 만듬&lt;/p&gt;

&lt;h2 id=&quot;메모리-보호&quot;&gt;메모리 보호&lt;/h2&gt;
&lt;p&gt;Base + bound를 이용해서 다른 JOB의 메모리에 접근하지 못하도록 한다.&lt;/p&gt;

&lt;h2 id=&quot;cpu-보호&quot;&gt;CPU 보호&lt;/h2&gt;
&lt;p&gt;운영체제가 항상 제어권을 확보할 수 있도록 해야한다. 
타이머 세팅 후 일정시간이 지나면 타이머 인터럽트를 이용해서 OS에 제어권을 넘긴다.&lt;/p&gt;</content><author><name></name></author><summary type="html">운영체제는 크고 복잡하다. 계속적인 개발을 필요로 한다.</summary></entry><entry><title type="html">Operating System 1</title><link href="http://localhost:4000/OS1/" rel="alternate" type="text/html" title="Operating System 1" /><published>2017-09-30T00:00:00+09:00</published><updated>2017-09-30T00:00:00+09:00</updated><id>http://localhost:4000/OS1</id><content type="html" xml:base="http://localhost:4000/OS1/">&lt;p&gt;공룡책 + &lt;a href=&quot;http://snui.snu.ac.kr/ocw/index.php?mode=view&amp;amp;id=623&quot;&gt;홍성수 교수님의 운영체제 기초&lt;/a&gt;으로 공부 하려고 한다.&lt;/p&gt;

&lt;h1 id=&quot;운영체제의-발전-과정-1&quot;&gt;운영체제의 발전 과정 1&lt;/h1&gt;

&lt;h2 id=&quot;operator사람&quot;&gt;Operator(사람)&lt;/h2&gt;
&lt;p&gt;50s 컴퓨터의 하드웨어는 비싸고 상대적으로 인건비가 저렴한 시절, &lt;code class=&quot;highlighter-rouge&quot;&gt;CPU사용률을 최대화&lt;/code&gt;하는것이 목적 &lt;br /&gt;
Operator라고 불리는 사람은 다음과 같은 과정으로 일을 한다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;사용자로부터 카드 덱을 수령&lt;/li&gt;
  &lt;li&gt;카드덱을 시스템에 로딩하고 수행&lt;/li&gt;
  &lt;li&gt;수행결과를 프린터로 출력&lt;/li&gt;
  &lt;li&gt;출력된 결과물을 사용자에게 전달
    &lt;ul&gt;
      &lt;li&gt;사람이 비용이 싸지만, 전기적인 것보다는 사람이 느릴수 밖에 없는 문제&lt;/li&gt;
      &lt;li&gt;Job to Job transitIOn(한작업에서 다른 작업으로 전환)에 사람이 개입해서 느려지게 되는 문제&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;batch-monitor&quot;&gt;Batch Monitor&lt;/h2&gt;
&lt;p&gt;테이프에 작업들을 주고 처리할때는 여러개에서 처리하고 다시 결과를 테이프에 기록하는 방법
사람이 하는것보다 CPU 사용량이 많아지게 되었다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;batch : 동일한 속성을 갖는 JOB의 묶음&lt;/li&gt;
  &lt;li&gt;IO중에는 IO가 종료할 때까지 CPU가 기다려야한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;io-channel-batch-monitor&quot;&gt;IO Channel Batch Monitor&lt;/h2&gt;
&lt;p&gt;IO작업과 CPU연산의 Overlap을 위해 IO 채널의 추가&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;IO 채널(IO 컨트롤러) : CPU처리를 하다가 다 읽으면 인터럽트를 통해서 알려줌 하지만 처리하는데 read 데이터가 필요하다면 기다려야함&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;동기적 IO : CPU가 연산을 수행할때 IO가 종료 되어야 처리하는 방법, CPU의 IDLE이 길어지기 때문에 비효율성&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;비동기적 IO :IO를 기다리지 않고 cpu 연산 - 대부분의 출력 연산(예외 - write를 모니터링 해야하는 경우)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;muilti-programing-batch-monitor&quot;&gt;muilti programing batch monitor&lt;/h2&gt;
&lt;p&gt;동기적 IO시에는 다른 Job을 수행 한다.&lt;/p&gt;

&lt;h2 id=&quot;multiprogramming&quot;&gt;multiprogramming&lt;/h2&gt;
&lt;p&gt;컴퓨터 시스템이 1개이상의 Active Job(종료되지 않은 프로그램)을 수행&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Degree of multiprograming : 메인 메모리에 있는 Active Job의 개수&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;multiprograming의-기술적-문제&quot;&gt;multiprograming의 기술적 문제&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Memory Protection
잘못된 포인터 메모리 엑세스로 다른 JOB의 메모리를 덮어쓰기 하는 경우를 막아야함
-&amp;gt; JOB마다 정해진 영역을 준다.(Relocation)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Relocation
base에서 시작해 bound까지 메모리에서 JOB의 범위를 정해준다.&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;base register : 프로그램의 시작 주소 저장&lt;/li&gt;
      &lt;li&gt;bound register : 프로그램의 크기 저장&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;모든 프로그램은 0부터 시작 base register의 주소와 더해서 사용한다. bound를 벗어나면 Protecton Error발생 한다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;MMU : 메모리를 계산하고 메모리를 넘는가를 확인&lt;/li&gt;
  &lt;li&gt;logical 프로그램에서의 주소(base register값) , physical address(변환을 거친 최종 주소)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;MMU 를 소프트웨어를 구현?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;성능문제(명령어 1개를 수행하기 위해 명령어 10개 이상이 필요)&lt;/li&gt;
  &lt;li&gt;mmu의 mmu가 필요, 재귀적으로 구성되게 됨&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;MMU는 OS에 의해서 관리됨(Base, bound값 얻거나 )
OS만 접근 할수있는 명령어의 존재 previlliged instructIOn&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Concurrent Programming
공유자원에 동시에 접근하는 문제&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;운영체제의-발전-과정-2&quot;&gt;운영체제의 발전 과정 2&lt;/h1&gt;
&lt;p&gt;1960s 후반
Transitster - 소형화, 가격 상대적으로 저렴, 무어의 법칙 적용, OS의 목표가 바뀌게 되었다.(cpu의 사용성 -&amp;gt; 사람의 효율성(인건비의 증가 - 사람이 쉬지 않도록 해야한다.)
-&amp;gt; 아직도 컴퓨터는 고가이다.이기 때문에 개인에게 터미널 제공 -&amp;gt; 인터렉티브한 사용이 가능해짐&lt;/p&gt;

&lt;p&gt;터미널 - TCU(Terminal control unit) - SERVER의 구조 : cpu는 1개이지만 사용자는 여러명이다. 인터렉티브 사용을 제공해야 한다 .-&amp;gt; 시분할(사람이 혼자 사용한다고 생각할정도로 쪼개서 나눠주기)&lt;/p&gt;

&lt;h2 id=&quot;interactive-time-sharing-operating-system&quot;&gt;Interactive Time Sharing Operating System&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;private한 사용을 제공(정보 보호를 위해서 그룹과 접근 권한 설정)&lt;/li&gt;
  &lt;li&gt;OS를 평가하는 척도의 변화 (단위 시간당 처리량 -&amp;gt; 사람들의 사용감)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;운영체제의-발전과정-3&quot;&gt;운영체제의 발전과정 3&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;인터넷이 필수가 됨 모든 장치가 연결되어 있다. &lt;code class=&quot;highlighter-rouge&quot;&gt;Connected&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;PC와 서버의 경계가 무너짐 - 고성능, 고사양되면서 HW의 가격이 저렴해졌다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;멀티미디어&lt;/code&gt;(여러개의 미디어 &amp;lt;-&amp;gt; 텍스스트,파일,데이터(유니미디어))의 지원이 중요해졌다.&lt;/li&gt;
  &lt;li&gt;멀티미디어는 - continuous 미디어(특정한 시간적 제약에 맞춰 제어되야하는 미디어)이다. ex)30fps영상(초당30프레임)&lt;/li&gt;
  &lt;li&gt;Downloading - 파일을 다 받아야함 / Streaming - 일부만 받아도 실행가능
    &lt;h2 id=&quot;os-스케줄링의-변화&quot;&gt;OS 스케줄링의 변화&lt;/h2&gt;
    &lt;p&gt;우선순위 스케줄링에서 Continuous 미디어를 위한 BandWith 스케줄링이 중요해졌다. -&amp;gt; CPU의 일정 부분을 미디어에 할당해주는 방법을 한다.
이는 기기의 생태계를 결정하는 중요한 요소가 됨&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">공룡책 + 홍성수 교수님의 운영체제 기초으로 공부 하려고 한다.</summary></entry><entry><title type="html">2017년 9월 29일 TIL</title><link href="http://localhost:4000/TIL20170929/" rel="alternate" type="text/html" title="2017년 9월 29일 TIL" /><published>2017-09-29T00:00:00+09:00</published><updated>2017-09-29T00:00:00+09:00</updated><id>http://localhost:4000/TIL20170929</id><content type="html" xml:base="http://localhost:4000/TIL20170929/">&lt;h1 id=&quot;os&quot;&gt;OS&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;http://snui.snu.ac.kr/ocw/index.php?mode=view&amp;amp;id=625&quot;&gt;운영체제 개념&lt;/a&gt;강의와 공룡책으로 진행할것이다. 
&lt;a href=&quot;../OS1&quot;&gt;운영체제 1&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;알고리즘&quot;&gt;알고리즘&lt;/h1&gt;

&lt;h2 id=&quot;rgb거리&quot;&gt;RGB거리&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/1149&quot;&gt;링크&lt;/a&gt;
잘 풀었다고 생각했는데 그것은 착각이었다. &lt;code class=&quot;highlighter-rouge&quot;&gt;min(Rn + min(Bn-1, Gn-1), Bn + min(Gn-1, Rn-1), Bn + min(Rn-1, Gn-1))&lt;/code&gt;까지는 잘 유도한거 같지만, 이렇게 하는게 아니라 계산값들을 누적 시켰어야 했다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BJ1149&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scanner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scanner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[][]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calDP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calDP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[][]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[][]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">OS 운영체제 개념강의와 공룡책으로 진행할것이다. 운영체제 1 알고리즘</summary></entry></feed>